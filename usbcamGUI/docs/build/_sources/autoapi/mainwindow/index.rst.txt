:mod:`mainwindow`
=================

.. py:module:: mainwindow

.. autoapi-nested-parse::

   Create a window for displaying frame and its properties



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mainwindow.Window



.. class:: Window(device: int = 0, suffix: str = 'png', camtype: str = 'usb_cam', color: str = 'RGB', dst: str = '.', param: str = 'full', rule: str = 'Sequential', parent=None)


   Bases: :class:`PySide2.QtWidgets.QMainWindow`

   Class to create main widnow

   Create main window for displaying frame read from a connected camera. The main window
   contains memu bar, push buttons, region window, sliders and status bar. These widget
   are created and added to main window in the instance method of this class.

   .. method:: get_cam(self)


   .. method:: setup(self)

      Setup the main window for displaying frame and widget.

      Create a QMainWindow object, then set menubar, toolbar, statusbar, widgets and layout.


   .. method:: adjust_windowsize(self)


   .. method:: set_theme(self)

      Set color theme of the main window.


   .. method:: set_timer(self)

      Set QTimer

      Create a QTimer object to switch frame on view area. The interval is set to the inverse
      of camera FPS.


   .. method:: stop_timer(self)

      Deactivate the Qtimer object.


   .. method:: start_timer(self)

      Activate the Qtimer object.


   .. method:: toolbar_setup(self)

      Create toolbar


   .. method:: view_setup(self)

      Set view area to diplay read frame in part of the main window


   .. method:: layout_setup(self)

      Set layout of objects on the window.


   .. method:: image_setup(self)

      Create a Qimage to assign frame, then initialize with an image which has zero in all pixels.


   .. method:: add_actions(self)

      Add actions executed when press each item in the memu window.


   .. method:: create_action(self, text: str, slot: Callable, key: str = None, checkable: bool = False, check_defalut: bool = False) -> PySide2.QtWidgets.QAction

      Create a QAction object.

      :param text: Text shown on menu.
      :type text: str
      :param slot: A method called when click the menu.
      :type slot: Callable
      :param key: Shortcut key. Defaults to None.
      :type key: str, optional
      :param checkable: Add a checkbox into the menu. Defaults to False.
      :type checkable: bool, optional
      :param check_defalut: Check default status. Defaults to False.
      :type check_defalut: bool, optional

      :returns: PySide2 QAction
      :rtype: QAction


   .. method:: add_menubar(self)

      Create menu bar, then add to the main window.


   .. method:: add_statusbar(self)

      Create status bar, then add to the main window.

      The status bar shows the coordinates on the frame where the cursor is located and
      its pixel value. The pixel value has RGB if the format of is color (RGB), does grayscale
      value if grayscale.


   .. method:: add_buttons(self)

      Add push buttons on the window.

      Add quit, save stop and usage buttons on the windows. When press each button, the set
      method (called "slot" in Qt framework) are execeuted.


   .. method:: create_button(self, text: str, slot: Callable, key: str = None, icon: icon.Icon = None, tip: str = None, checkable: bool = False, minsize: tuple = None) -> PySide2.QtWidgets.QPushButton

      Create a QPushButton object.

      :param text: Text shown on the button.
      :type text: str
      :param slot: A method called when click the button.
      :type slot: Callable
      :param key: Shortcut key. Defaults to None.
      :type key: str, optional
      :param icon: An icon shown on the button. Defaults to None.
      :type icon: Icon, optional
      :param tip: A tips shown when position the pointer on the button. Defaults to None.
      :type tip: str, optional
      :param checkable: Add button to checkbox. Defaults to False.
      :type checkable: bool, optional
      :param msize: Minimum size of the button box, (width, height).
      :type msize: tuple, optional

      :returns: PySide2 QPushButton
      :rtype: QPushButton


   .. method:: add_params(self) -> PySide2.QtWidgets.QGridLayout

      Set the properties of camera parameter.

      Set the properties of camera parameter, then add sliders to change each parameter.
      When change value on the slider, the value of paramter also changes by the caller
      function.


   .. method:: update_params(self, plist: list) -> PySide2.QtWidgets.QGridLayout

      Update properties of camera parameter.


   .. method:: add_slider(self, param: str)

      Create slider, labels to show pamarater's name and its value.

      :param param: A parameter to crate slider.
      :type param: str


   .. method:: add_prop_window(self) -> PySide2.QtWidgets.QGridLayout

      Create a table to show the current properties of camera.

      :returns: PySide2 QGridLayout
      :rtype: QGridLayout


   .. method:: information_window_setup(self)


   .. method:: create_mainlayout(self)

      Create the main layout which consists of view area and information window.


   .. method:: update_mainlayout(self)

      Recreate the main layout.


   .. method:: delete_layout(self, layout)

      Delete layout

      :param layout: QBoxLayout class object to delete
      :type layout: QBoxLayout


   .. method:: create_view_area_layout(self)

      Create view-area layout


   .. method:: create_information_layout(self)

      Create information-part layout

      upper-left: current properties
      upper-right: buttons
      lower: sliders


   .. method:: display(func)


   .. method:: stop_frame(self, checked: bool)

      Stop reading next frame.

      :param checked: True when presse the Stop button (toggle on). False when press
                      again (toggel off).
      :type checked: bool


   .. method:: keyPressEvent(self, event)

      Exit the program

      This method will be called when press the Escape key on the window.


   .. method:: get_coordinates(self, event)

      Show the current coordinates and value in the pixel where the cursor is located.

      The status bar is updates by the obtained values.


   .. method:: next_frame(self)

      Get next frame from the connected camera.

      Get next frame, set it to the view area and update.


   .. method:: convert_frame(self)

      Convert the class of frame

      Create qimage, qpixmap objects from ndarray frame for displaying on the window.


   .. method:: save_frame(self)

      Save the frame on the window as an image.


   .. method:: update_prop_table(self)


   .. method:: record(self)

      Start or end recording


   .. method:: save_frame_manual(self) -> bool

      Determine file name of image to save with QFileDialog


   .. method:: get_screensize(self)

      Get current screen size from the output of linux cmd xrandr.


   .. method:: set_sliderval(self, param: str, value: int)


   .. method:: set_param_default(self)


   .. method:: get_properties(self) -> list


   .. method:: write_text(self, text: str, level: str = 'info', color: str = None)



